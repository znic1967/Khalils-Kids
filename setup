#!/bin/bash

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]
then
	 echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
	 exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "  List of global software installed:                "
echo "   1) Python                                        "
echo "   2) Python's PIP                                  "
echo "   3) Curl                                          "
echo "   4) Git                                           "
echo "   5) Gcovr                                         "
echo "   6) pv                                            "
echo "   7) Homebrew + libmagic (OSX Only)                "
echo "   8) XCode CLI tools (OSX Only)                    "
echo "└────────────────────────────────────────────────── "
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || exit 1
# Get base path
BASE=$(dirname "$0")
BASE=$(cd $BASE ; pwd -P)
# Stash the tool directory
TOOLDIR=$BASE/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Define name of the arm version we are downloading
ARM_GCC_URL="https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2017q4/"
ARM_GCC_COMMON="gcc-arm-none-eabi-7-2017-q4-major"
ARM_GCC_ARCHIVE_FILE_LINUX="$ARM_GCC_COMMON-linux.tar.bz"
ARM_GCC_ARCHIVE_FILE_MAC="$ARM_GCC_COMMON-mac.tar.bz"
ARM_GCC_ARCHIVE_LINUX_URL="$ARM_GCC_URL$ARM_GCC_ARCHIVE_FILE_LINUX"
ARM_GCC_ARCHIVE_MAC_URL="$ARM_GCC_URL$ARM_GCC_ARCHIVE_FILE_MAC"
GCC_PKG=""

CLANG_VERSION="7.0.0"
CLANG_BASE_URL="http://releases.llvm.org/$CLANG_VERSION/"
CLANG_14="clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-14.04"
CLANG_16="clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-16.04"
CLANG_MAC="clang+llvm-$CLANG_VERSION-x86_64-apple-darwin"
CLANG_FILE_EXTENSION=".tar.xz"
CLANG_14_FILE="$CLANG_14$CLANG_FILE_EXTENSION"
CLANG_14_URL="$CLANG_BASE_URL$CLANG_14_FILE"
CLANG_16_FILE="$CLANG_16$CLANG_FILE_EXTENSION"
CLANG_16_URL="$CLANG_BASE_URL$CLANG_16_FILE"
CLANG_MAC_FILE="$CLANG_MAC$CLANG_FILE_EXTENSION"
CLANG_MAC_URL="$CLANG_BASE_URL$CLANG_MAC_FILE"
CLANG_PKG=""
CLANG_PATH=""

OPENOCD_URL="https://github.com/gnu-mcu-eclipse/openocd/releases/download"
OPENOCD_VERSION="0.10.0-10-20181020"
OPENOCD_BASE="$OPENOCD_URL/v$OPENOCD_VERSION/gnu-mcu-eclipse-openocd-$OPENOCD_VERSION"
OPENOCD_MAC_URL="$OPENOCD_BASE-1448-osx.tgz"
OPENOCD_MAC_PATH="gnu-mcu-eclipse-openocd-$OPENOCD_VERSION-1448-osx.tgz"
OPENOCD_LINUX64_URL="$OPENOCD_BASE-0522-centos64.tgz"
OPENOCD_LINUX64_PATH="gnu-mcu-eclipse-openocd-$OPENOCD_VERSION-0522-centos64.tgz"
OPENOCD_PKG=""

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo ""
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]
then
		echo 'Only 64-bit architecture systems are supported!'
		exit 1
fi
echo " ──────────────────────────────────────────────────┐"
echo "               System Dependent Setup               "
echo "└────────────────────────────────────────────────── "
cd "$TOOLDIR"
case "$OS" in
	Linux) # Linux & Windows WSL Case
		echo "Operating System: Linux"
		SJSUONEDEV=/dev/ttyUSB0
		echo " ───────────────────────────────────────────────────┐"
		echo "                    Updating Apt                     "
		echo "└─────────────────────────────────────────────────── "
		sudo apt update
		echo " ───────────────────────────────────────────────────┐"
		echo "   Installing git, make python, pip, Curl, tar, pv   "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install git make python python-pip curl tar pv

		VERSION_ID=$(cat /etc/os-release | grep "VERSION_ID=")
		echo "UBUNTU $VERSION_ID"
		if [ "$VERSION_ID" = "VERSION_ID=\"14.04\"" ]
		then
			echo " ───────────────────────────────────────────────────┐"
			echo "    Downloading Clang $CLANG_VERSION tools (Ubuntu 14.04)"
			echo "└─────────────────────────────────────────────────── "
			curl -C - -LO "$CLANG_14_URL"
			CLANG_PKG="$CLANG_14_FILE"
			CLANG_PATH="$CLANG_14"
		else
			echo " ───────────────────────────────────────────────────┐"
			echo "     Downloading Clang $CLANG_VERSION tools (Ubuntu 16.04)+"
			echo "└─────────────────────────────────────────────────── "
			curl -C - -LO "$CLANG_16_URL"
			CLANG_PKG="$CLANG_16_FILE"
			CLANG_PATH="$CLANG_16"
		fi
		echo " ───────────────────────────────────────────────────┐"
		echo "                Downloading OpenOCD                  "
		echo "└─────────────────────────────────────────────────── "
		curl -C - -LO "$OPENOCD_LINUX64_URL"
		OPENOCD_PKG="$OPENOCD_LINUX64_PATH"
		echo " ──────────────────────────────────────────────────┐"
		echo "      Adding current user to '$GROUP' group"
		echo "└────────────────────────────────────────────────── "
		THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
		sudo adduser $USER $THE_GROUP
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO $ARM_GCC_ARCHIVE_LINUX_URL
		GCC_PKG=$ARM_GCC_ARCHIVE_FILE_LINUX
		;;

	Darwin) # OS X Case
		echo "Operating System: Mac OSX Darvin"
		SJSUONEDEV=/dev/tty.usbserial-A503JOLS
		echo " ───────────────────────────────────────────────────┐"
		echo "    Install XCode Command Line Tools (GCC, make)     "
		echo "└─────────────────────────────────────────────────── "
		# Install Command Line tools (make etc...)
		xcode-select --install &> /dev/null
		# Accept User Agreement
		sudo xcodebuild -license accept
		echo " ───────────────────────────────────────────────────┐"
		echo "                 Install Homebrew                    "
		echo "└─────────────────────────────────────────────────── "
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		echo " ───────────────────────────────────────────────────┐"
		echo "                   Install xz                        "
		echo "└─────────────────────────────────────────────────── "
    brew install xz
		echo " ───────────────────────────────────────────────────┐"
		echo "                   Install pv                        "
		echo "└─────────────────────────────────────────────────── "
    brew install pv
		echo " ───────────────────────────────────────────────────┐"
		echo "          Prompt Git installer by invoking it        "
		echo "└─────────────────────────────────────────────────── "
		git --version
		echo " ───────────────────────────────────────────────────┐"
		echo "     Downloading Clang $CLANG_VERSION tools          "
		echo "└─────────────────────────────────────────────────── "
		curl -C - -LO "$CLANG_MAC_URL"
		CLANG_PKG="$CLANG_MAC_FILE"
		CLANG_PATH="$CLANG_MAC"
		echo " ───────────────────────────────────────────────────┐"
		echo "                Downloading OpenOCD                  "
		echo "└─────────────────────────────────────────────────── "
		curl -C - -LO "$OPENOCD_MAC_URL"
		OPENOCD_PKG="$OPENOCD_MAC_PATH"
		echo " ───────────────────────────────────────────────────┐"
		echo "        Installing PIP via bootstrap.pypa.io         "
		echo "└─────────────────────────────────────────────────── "
		curl https://bootstrap.pypa.io/get-pip.py | python2.7
		echo " ──────────────────────────────────────────────────┐"
		echo "            Downloading gcc-arm-embedded            "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO $ARM_GCC_ARCHIVE_MAC_URL
		GCC_PKG=$ARM_GCC_ARCHIVE_FILE_MAC
		;;

	*)	# Default if Operating System other than Mac or Linux
		echo -n "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems "
		echo "are supported! Exiting..."
		exit 1
		;;
esac

if [[ "$1" != "fast" ]]; then
echo " ───────────────────────────────────────────────────┐"
echo "                  Upgrading PIP                      "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install --upgrade pip
echo " ───────────────────────────────────────────────────┐"
echo "                 Installing Gcovr                    "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install gcovr
echo " ───────────────────────────────────────────────────┐"
echo "          Installing/Upgrading Virtualenv            "
echo "└─────────────────────────────────────────────────── "
sudo -H pip install --upgrade virtualenv
echo " ──────────────────────────────────────────────────┐"
echo "           Extracting gcc-arm-embedded             "
echo "└────────────────────────────────────────────────── "
pv "$GCC_PKG" | tar --extract --bzip --file="-"
echo
echo " ──────────────────────────────────────────────────┐"
echo "             Extracting Clang $CLANG_VERSION        "
echo "└────────────────────────────────────────────────── "
pv "$CLANG_PKG" | tar --extract --xz --file="-"
echo
echo " ──────────────────────────────────────────────────┐"
echo "               Extracting OpenOCD                   "
echo "└────────────────────────────────────────────────── "
pv "$OPENOCD_PKG" | tar --extract --gzip --file="-"
echo
rm -r "openocd"
mkdir "openocd"
# Move contents of openocd in gnu-mcu-eclipse (without version) to openocd
# folder
mv -f gnu-mcu-eclipse/openocd/*/* openocd
# Return back to base of repository
cd "$BASE"

echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Hyperload                 "
echo "└─────────────────────────────────────────────────── "
rm -rf "$TOOLDIR/Hyperload/"
git clone --depth=1 https://github.com/kammce/Hyperload.git \
                    "$TOOLDIR/Hyperload/"
cd "$TOOLDIR/Hyperload/" && ./setup
fi

cd "$BASE"
echo " ───────────────────────────────────────────────────┐"
echo "        Generating Environment Variables File        "
echo "└─────────────────────────────────────────────────── "
cat > env.mk <<EOL
#!/bin/bash
# Setup a base directory:
SJBASE = $BASE

# Board Settings:
SJBAUD = 38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
SJPROJ = firmware

# Sets which DBC to generate, defaults to "DBG"
ENTITY = DBG

# Path to CLANG compiler
SJCLANG = \$(SJBASE)/tools/$CLANG_PATH/bin
# Path to ARM GCC compiler
SJARMGCC = \$(SJBASE)/tools/gcc-arm-none-eabi-7-2017-q4-major/bin
# Path to Openocd compiler
SJOPENOCD = \$(SJBASE)/tools/openocd/bin

# Compiler and library settings:
# Selects compiler version to use
PATH := \$(shell printf "%s" "\$(PATH):\$(SJARMGCC)")
PATH := \$(shell printf "%s" "\$(PATH):\$(SJCLANG)")
PATH := \$(shell printf "%s" "\$(PATH):\$(SJOPENOCD)")
SJLIBDIR = "\$(SJBASE)/firmware/library"
EOL
echo " ───────────────────────────────────────────────────┐"
echo "      Linking Files to Firmware Project Folder       "
echo "└─────────────────────────────────────────────────── "
./tools/link_projects.sh
echo " ───────────────────────────────────────────────────┐"
echo "                   SETUP COMPLETE!                   "
echo "                                                     "
echo " IF THIS IS YOUR FIRST TIME RUNNING THE SETUP SCRIPT "
echo "             PLEASE RESTART YOUR SYSTEM              "
echo "         TO LOAD CODE INTO YOUR SJONE BOARD          "
echo "└─────────────────────────────────────────────────── "
